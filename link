#!/usr/bin/env python3
import argparse
import pathlib


HOME = pathlib.Path.home()
SOURCE_PATH = pathlib.Path(__file__).resolve()
ROOT_PATH = SOURCE_PATH.parent

LINKS_FILENAME = 'LINKS'


def main(execute=False, force=False):
    print('=== begin ===')
    print('root path:', ROOT_PATH)
    print()

    print('=== activity ===')
    instructions = []
    for node in ROOT_PATH.iterdir():
        if node.is_dir() and not node.name.startswith('.'):
            links_node = node / LINKS_FILENAME
            if links_node.exists():
                with links_node.open() as fd:
                    for spec in fd:
                        (name, *instructions0) = (part.strip() for part in spec.split('|', 1))

                        target = node / name
                        link_node = HOME / name
                        instructions.extend(instructions0)

                        if execute:
                            if force:
                                if link_node.is_dir() and not link_node.is_symlink():
                                    try:
                                        link_node.rmdir()
                                    except OSError:
                                        print('WARNING: will not replace non-empty directory:', link_node)
                                elif link_node.exists():
                                    link_node.unlink()

                            if link_node.exists():
                                action = 'skipped (exists)'
                            else:
                                link_node.symlink_to(target)
                                action = 'linked'
                        else:
                            action = 'dry run'

                        print(f'{action}:', link_node, 'â†’', target)

    print()

    print('=== instructions ===')
    print(*instructions, sep='\n')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-f', '--force',
        action='store_true',
    )
    parser.add_argument(
        '-n', '--dry-run',
        action='store_false',
        default=True,
        dest='execute',
    )
    args = parser.parse_args()
    main(**vars(args))
